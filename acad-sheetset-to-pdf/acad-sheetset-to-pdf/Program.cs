/*
 * This utility takes two major arguments: the name of a sheetset file and the name of a pdf output file.
 * We plot the complete sheetset to the pdf file, using the first entry in the sheetset's list of page setup overrides.
 * 
 * 
 * Internally, the strategy is to read the sheetset file to construct an AutoCAD sheet list file (a *.dsd file, which seems to use the ini format.),
 * and then use the Document.SendCommand function of the Auotcad COM API to send a "-PUBLISH" command to the Autocad shell, along with the path
 * of our newly-constructed dsd file.
 * The Autocad documentation recommends against manually constructing a dsd file, saying that the better way to do it is use the AutoCAD API,
 * because the format of the dsd file is liable to change between versions of AutoCAD.
 * However, the part of the Autocad API that supports generating a dsd file (The AcadApplication.Publisher namespace (or something like that)) is not exposed via COM, 
 * but is only exposed via the ObjectArx API.
 * This means that if we want to use the API to construct the dsd file, we have to deal with the rigamarole of telling AutoCAD, via COM, to load
 * an OBjectARX dll, which we have to create to do the desired constructing of the dsd file.  This seems to me to be more trouble than it is worth -
 * I can imagine that I would have to invent some non-standard, probably buggy, way to communicate with the loaded ObjectARX dll to tell it
 * What files to put in the dsd file.  There may be some way to do this, but I do not have a clear idea of how at the moment.  The most
 * intuitive approach, to my mind, is to construct the dsd file myself.  The dsd format seems to be understandable by glancing at a few examples of dsd 
 * files generated by the Autocad PUBLISH command.
 * 
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Autodesk.AutoCAD.Interop;
using Autodesk.AutoCAD.Interop.Common;
using ACSMCOMPONENTS23Lib;
using System.Runtime.InteropServices;

namespace acad_sheetset_to_pdf
{

    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            //*****parse the command-line arguments*****
            //for now, I will simply hard code these values.
            String nameOfSheetsetFile = "C:\\work\\ec-18-013_les_schwab_397\\main_sheet_set.dst";
            String nameOfPdfOutputFile = "C:\\work\\ec-18-013_les_schwab_397\\out.pdf";
            //TO DO: parse and verify the real command-line arguments, compose a help message.

            //*****read the sheetset file and construct a dsd file accordingly*****

            //Console.WriteLine(Microsoft.VisualBasic.Information.TypeName(new AcSmSheetSetMgr()));
            //Console.WriteLine(Microsoft.VisualBasic.Information.TypeName(Activator.CreateInstance(Type.GetTypeFromProgID("AcSmComponents.AcSmSheetSetMgr.23"), true)));


            //IAcSmSheetSetMgr sheetSetMgr; = new AcSmSheetSetMgrClass();
            IAcSmSheetSetMgr sheetSetMgr;
            //sheetSetMgr = (IAcSmSheetSetMgr) new AcSmSheetSetMgr();
            //dynamic sheetSetMgr;

            ////Console.WriteLine(Type.GetTypeFromProgID("AcSmComponents.AcSmSheetSetMgr.23"));
            ////Console.WriteLine(Type.GetTypeFromProgID("AutoCAD.Application.23"));
            Type t = Type.GetTypeFromProgID("AcSmComponents.AcSmSheetSetMgr.23");
            sheetSetMgr =  (IAcSmSheetSetMgr) Activator.CreateInstance(t, true);
            //dynamic sheetSetMgr = (dynamic)Activator.CreateInstance(Type.GetTypeFromProgID("AcSmComponents.AcSmSheetSetMgr.23"), true);


            ////try
            //{
            //    // Create a new instance of AcSmSheetSetMgr
            //    sheetSetMgr = (dynamic)Activator.CreateInstance(Type.GetTypeFromProgID("AcSmComponents.AcSmSheetSetMgr.23"), true);
            //}
            //catch
            //{
            //    // If an instance of AcSmSheetSetMgr is not created then message and exit
            //    Console.WriteLine("Instance of 'AcSmComponents.AcSmSheetSetMgr.23' could not be created.");
            //    Console.WriteLine("Press any key to exit.");
            //    Console.ReadKey();
            //    return;
            //}


            IAcSmDatabase sheetdb = sheetSetMgr.OpenDatabase(nameOfSheetsetFile, false);
            if (sheetdb.GetLockStatus() == 0) { sheetdb.LockDb(sheetdb); } //it may not be necessary tolock the sheetset, because I am only reading fromit, not writing to it.
            AcSmSheetSet sheetset = sheetdb.GetSheetSet();

            IAcSmEnumComponent myAcSmEnumComponent = sheetset.GetSheetEnumerator();
            IAcSmComponent thisAcSmComponent;

            while ((thisAcSmComponent = myAcSmEnumComponent.Next()) != null)
            {
                Console.WriteLine(thisAcSmComponent.GetObjectId().GetPersistObject().GetTypeName());
            }

            if (sheetdb.GetLockStatus() != 0){ sheetdb.UnlockDb(sheetdb);}

            // Keep the console window open in debug mode.
            Console.WriteLine("Press any key to exit.");
            Console.ReadKey();


        }
    }
}
