/*
 * This utility takes two major arguments: the name of a sheetset file and the name of a pdf output file.
 * We plot the complete sheetset to the pdf file, using the first entry in the sheetset's list of page setup overrides.
 * 
 * 
 * Internally, the strategy is to read the sheetset file to construct an AutoCAD sheet list file (a *.dsd file, which seems to use the ini format.),
 * and then use the Document.SendCommand function of the Auotcad COM API to send a "-PUBLISH" command to the Autocad shell, along with the path
 * of our newly-constructed dsd file.
 * The Autocad documentation recommends against manually constructing a dsd file, saying that the better way to do it is use the AutoCAD API,
 * because the format of the dsd file is liable to change between versions of AutoCAD.
 * However, the part of the Autocad API that supports generating a dsd file (The AcadApplication.Publisher namespace (or something like that)) is not exposed via COM, 
 * but is only exposed via the ObjectArx API.
 * This means that if we want to use the API to construct the dsd file, we have to deal with the rigamarole of telling AutoCAD, via COM, to load
 * an OBjectARX dll, which we have to create to do the desired constructing of the dsd file.  This seems to me to be more trouble than it is worth -
 * I can imagine that I would have to invent some non-standard, probably buggy, way to communicate with the loaded ObjectARX dll to tell it
 * What files to put in the dsd file.  There may be some way to do this, but I do not have a clear idea of how at the moment.  The most
 * intuitive approach, to my mind, is to construct the dsd file myself.  The dsd format seems to be understandable by glancing at a few examples of dsd 
 * files generated by the Autocad PUBLISH command.
 * 
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Autodesk.AutoCAD.Interop;
using Autodesk.AutoCAD.Interop.Common;
using ACSMCOMPONENTS23Lib;
using System.Runtime.InteropServices;
using CommandLine;

namespace acad_sheetset_to_pdf
{

    class Program
    {
        public class Options
        {
            [Option(Required = true, HelpText = "The sheetset file to be processed.")]
            public String SheetSetFile { get; set; }

            [Option(Required = true, HelpText = "The pdf file to be generated.")]
            public String OutputPdfFile { get; set; }
        }


        //The [STAThread] statement below was the answer to make the instantiation of the COM objects stop complaining that the interface could not be found.
        [STAThread] 
        static int Main(string[] args)
        {
            Options commandLineOptions = new Options();
            bool parseErrorsOccured = false;

            CommandLine.Parser.Default.ParseArguments<Options>(args)
                .WithParsed<Options>(opts => commandLineOptions = opts)
                .WithNotParsed<Options>((errs) => parseErrorsOccured = true);

            if (parseErrorsOccured) {
                Console.WriteLine("some parse errors occured. ahoy.");
                return 1;
            }

            String nameOfDwgFileContainingThePageSetup;
            String nameOfThePageSetup;
            IAcadApplication acad;
            acad = new AcadApplication();

            //*****parse the command-line arguments*****
            //for now, I will simply hard code these values.
            String nameOfSheetsetFile = commandLineOptions.SheetSetFile;
            String nameOfPdfOutputFile = commandLineOptions.OutputPdfFile;
            String nameOfTheTemporaryDsdFile = System.IO.Path.GetTempFileName() + ".dsd";
            //TO DO: parse and verify the real command-line arguments, compose a help message.

            //*****read the sheetset file and construct a dsd file accordingly*****
            IAcSmSheetSetMgr sheetSetMgr;
            IAcSmDatabase sheetdb;
            IAcSmSheetSet sheetSet;

            sheetSetMgr = new AcSmSheetSetMgr();
 
            Console.WriteLine("attempting to open " + nameOfSheetsetFile);
            sheetdb = sheetSetMgr.OpenDatabase(nameOfSheetsetFile, bFailIfAlreadyOpen: false);
            if (sheetdb.GetLockStatus() == 0) { sheetdb.LockDb(sheetdb); } //it may not be necessary to lock the sheetset, because I am only reading from it, not writing to it.
            sheetSet = sheetdb.GetSheetSet();
            if (sheetdb.GetLockStatus() != 0) { sheetdb.UnlockDb(sheetdb); }
            //read the page setup override information from the sheet set.
            nameOfDwgFileContainingThePageSetup = sheetSet.GetAltPageSetups().ResolveFileName();


            IAcSmNamedAcDbObjectReference myNamedAcDbObjectReference;
            myNamedAcDbObjectReference = sheetSet.GetDefAltPageSetup();
            //nameOfThePageSetup = myNamedAcDbObjectReference.GetName();
            // the above is not working because sheetSet.GetDefAltPageSetup() returns null.
            // I suspect that sheetSet.GetDefAltPageSetup() only returns something when
            // this code is being run within the Autocad process.
            //as a work-around, we might have to open the dwg file containing the page setup, and read out the page setup names from it.
            acad.Visible = true;
            IAcadDocument documentContainingThePageSetup = acad.Documents.Open(Name: nameOfDwgFileContainingThePageSetup, ReadOnly: true);
            while (acad.GetAcadState().IsQuiescent == false)
            {
                Console.WriteLine("waiting for autoCAD to become quiescent.");
            }

            Console.WriteLine("documentContainingThePageSetup.Name: " + documentContainingThePageSetup.Name);		//             documentContainingThePageSetup.Name

            Console.WriteLine("documentContainingThePageSetup.PlotConfigurations.Count: " + documentContainingThePageSetup.PlotConfigurations.Count);       //             documentContainingThePageSetup.PlotConfigurations.Count


            foreach ( IAcadPlotConfiguration thisPlotConfiguration in documentContainingThePageSetup.PlotConfigurations)
            {
                Console.WriteLine("found a PlotConfiguration: " + thisPlotConfiguration.Name);
            }
            nameOfThePageSetup = documentContainingThePageSetup.PlotConfigurations.Item(0).Name;
            documentContainingThePageSetup.Close(SaveChanges: false);
            Console.WriteLine("nameOfDwgFileContainingThePageSetup: " + nameOfDwgFileContainingThePageSetup);
            Console.WriteLine("nameOfThePageSetup: " + nameOfThePageSetup);

            string dsdContent = "";
            dsdContent +=
                "[DWF6Version]" + "\r\n" +
                "Ver=1" + "\r\n" +
                "[DWF6MinorVersion]" + "\r\n" +
                "MinorVer=1" + "\r\n";

            IAcSmEnumComponent myAcSmEnumComponent = sheetSet.GetSheetEnumerator();
            IAcSmComponent thisAcSmComponent;
            IAcSmSheet thisSheet;
            while ((thisAcSmComponent = myAcSmEnumComponent.Next()) != null)
            {
                Console.WriteLine(thisAcSmComponent.GetObjectId().GetPersistObject().GetTypeName());
                thisSheet = (IAcSmSheet) thisAcSmComponent.GetObjectId().GetPersistObject();
                Console.WriteLine("thisSheet.GetName(): " + thisSheet.GetName());		//                 thisSheet.GetName()
                Console.WriteLine("thisSheet.GetLayout().GetName(): " + thisSheet.GetLayout().GetName());		//                 thisSheet.GetLayout().GetName()
                Console.WriteLine("thisSheet.GetLayout().ResolveFileName(): " + thisSheet.GetLayout().ResolveFileName());       //                 thisSheet.GetLayout().ResolveFileName()
                Console.WriteLine("thisSheet.GetLayout().GetFileName(): " + thisSheet.GetLayout().GetFileName());		//                 thisSheet.GetLayout().GetFileName()

                dsdContent +=
                    "[DWF6Sheet:" + thisSheet.GetName() + "]" + "\r\n" +
                    "DWG=" + thisSheet.GetLayout().ResolveFileName() + "\r\n" +
                    "Layout=" + thisSheet.GetLayout().GetName() + "\r\n" +
                    "Setup=" + nameOfThePageSetup + "|" + nameOfDwgFileContainingThePageSetup + "\r\n" +
                    "OriginalSheetPath=" + thisSheet.GetLayout().ResolveFileName() + "\r\n" +
                    "Has Plot Port=" + "0" + "\r\n" + 
                    "Has3DDWF=" + "0" + "\r\n";
            }

            dsdContent +=
                "[Target]" + "\r\n" +
                "Type=6" + "\r\n" +
                "DWF=" + nameOfPdfOutputFile + "\r\n" +
                "OUT=" + System.IO.Path.GetDirectoryName(nameOfPdfOutputFile) /*+ System.IO.Path.DirectorySeparatorChar*/ + "\r\n" + 
                "PWD=" + "" + "\r\n" +
                "[PdfOptions]" + "\r\n" +
                "IncludeHyperlinks=FALSE" + "\r\n" +
                "CreateBookmarks=FALSE" + "\r\n" +
                "CaptureFontsInDrawing=TRUE" + "\r\n" +
                "ConvertTextToGeometry=FALSE" + "\r\n" +
                "VectorResolution=600" + "\r\n" +
                "RasterResolution=400" + "\r\n" +
                "[AutoCAD Block Data]" + "\r\n" +
                "IncludeBlockInfo=0" + "\r\n" +
                "BlockTmplFilePath =" + "\r\n" +
                "[SheetSet Properties]" + "\r\n" +
                "IsSheetSet=TRUE" + "\r\n" +
                "IsHomogeneous=FALSE" + "\r\n" +
                "SheetSet Name=" + sheetSet.GetName() + "\r\n" +
                "NoOfCopies=1" + "\r\n" +
                "PlotStampOn=FALSE" + "\r\n" +
                "ViewFile=FALSE" + "\r\n" +
                "JobID=0" + "\r\n" +
                "SelectionSetName=" + "\r\n" +
                "AcadProfile=" + "\r\n" +
                "CategoryName=" + "\r\n" +
                "LogFilePath=" + "\r\n" +
                "IncludeLayer=FALSE" + "\r\n" +
                "LineMerge=FALSE" + "\r\n" +
                "CurrentPrecision =" + "\r\n" +
                "PromptForDwfName=FALSE" + "\r\n" +
                "PwdProtectPublishedDWF=FALSE" + "\r\n" +
                "PromptForPwd=FALSE" + "\r\n" +
                "RepublishingMarkups=FALSE" + "\r\n" +
                "DSTPath=" + nameOfSheetsetFile + "\r\n" +
                "PublishSheetSetMetadata=FALSE" + "\r\n" +
                "PublishSheetMetadata=FALSE" + "\r\n" +
                "3DDWFOptions=0 0" + "\r\n" + "\r\n" +
                "";

            System.IO.File.WriteAllText(path: nameOfTheTemporaryDsdFile, contents: dsdContent);

            Console.WriteLine(nameOfTheTemporaryDsdFile);
 
            if (sheetdb.GetLockStatus() != 0){ sheetdb.UnlockDb(sheetdb);}
            IAcadDocument workingDocument = acad.Documents.Add();
            while (acad.GetAcadState().IsQuiescent == false)
            {
                Console.WriteLine("waiting for autoCAD to become quiescent.");
            }
            workingDocument.SetVariable("FILEDIA", 0);
            workingDocument.SendCommand("-PUBLISH" + "\n" + nameOfTheTemporaryDsdFile + "\n");
            workingDocument.Close(SaveChanges: false);
            while (acad.GetAcadState().IsQuiescent == false)
            {
                Console.WriteLine("waiting for autoCAD to become quiescent.");
            }
            // Keep the console window open
            Console.WriteLine("Press any key to exit.");
            Console.ReadKey();
            acad.Quit();

            return 0;
        }
    }
}
